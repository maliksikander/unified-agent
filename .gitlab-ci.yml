variables:
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${TIME_TOKEN}"
  IMAGE_NAME_BRANCH: "${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHA}"

include:
  - project: 'cim/ci-templates'
    ref: 'main'
    file:
      - trivy.yaml
      - grype.yaml
      - trivy-merge.yaml
      - grype-merge.yaml
      - build_time.yml
# uncomment if need to publish to dockerhub
#      - dockerhub-publish.yaml
      - gitlab-publish.yaml

stages:
  - test
  - code_format
  - init
  - artifacts
  - sonarqube-scan
  - build-gitlab
  - scan
  - publish_dockerhub


# #+==================Runs on Every Commit and merge requests========================+
node-test:
  stage: test
  when: on_success
  image: gitlab.expertflow.com:9242/general/node:CSN-3623
  script:
    - npm install
    - npm run coverage
  only:
   refs:
    - /^.+_f-.+$/
    - /^.+_b-.+$/
    - merge_requests

  allow_failure: false
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
      - coverage
  artifacts:
    paths:
        - coverage
        - node_modules/


# #+==================Runs on Every Commit and merge requests========================+

node-format:
  stage: code_format
  when: on_success
  image: gitlab.expertflow.com:9242/general/node:CSN-3623
  script:
    - npm run format:check

  allow_failure: false
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/
    - merge_requests
  cache:
      key: ${CI_COMMIT_REF_SLUG}
      paths:
          - node_modules
      policy: pull


#+==================Runs on merge requests only========================+

time_build:
  extends: .build_time
  stage: init
  when: on_success
  only:
      - /^.+_f-.+$/
      - /^.+_b-.+$/
      - merge_requests
      - tags

#+==================Runs on Every Commit ========================+
node_artifacts:
   stage: artifacts
   when: on_success
   image: gitlab.expertflow.com:9242/general/node:CSN-3623
   script:
     - npm install
     - npm run build
     - export TIME_TOKEN="$(cat .ci_status/ci_time)"
     - echo "${TIME_TOKEN}"
     - rm -rf node_modules/.sonar
   artifacts:
       name: "$CI_PROJECT_TITLE"
       paths:
         - dist
         - .ci_status/
   allow_failure: false
   cache:
       key: ${CI_COMMIT_REF_SLUG}
       paths:
           - node_modules
       policy: pull
   only:
      - /^.+_f-.+$/
      - /^.+_b-.+$/
      - merge_requests
      - tags

sonarqube-test:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: sonarqube-scan
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    #SONAR_HOST_URL: "http://122.129.75.138:9000"
    #SONAR_HOST_URL: "http://124.29.220.135:9000"
    SONAR_HOST_URL: "http://sonarqube.expertflow.com:9000"
    #SONAR_HOST_URL: "http://192.168.1.109:9000"
    SONAR_TOKEN: "${SONAR_PASS}"
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/
    - merge_requests
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -X -Dsonar.testExecutionReportPaths=coverage/test-report.xml -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.sources=src -Dsonar.exclusions=**/node_modules/** -Dsonar.tests=src -Dsonar.test.inclusions=**/*.spec.ts  -Dsonar.projectKey=unified-agent -Dsonar.qualitygate.wait=true -Dsonar.projectName=${CI_PROJECT_NAME}
  allow_failure: false

#+==================Runs on merge requests only========================+
# ng_build:
#    stage: build
#    when: on_success
#    image: gitlab.expertflow.com:9242/general/node:CSN-3623
#    script:
#    - npm run build
#    #- export TIME_TOKEN=$(env TZ=GMT-5 date +%d_%m_%Y-%H_%M_%S)
#    #- echo "${TIME_TOKEN} ${BUILD_NUMBER}"
#    #- mv target/bot-framework-*.jar target/bot-framework-"${BUILD_TIME}_build-${BUILD_NUMBER}".jar
#    #- mv target/bot-framework-*.jar.original target/bot-framework-"${BUILD_TIME}_build-${BUILD_NUMBER}".jar.original

#    artifacts:
#        name: "$CI_PROJECT_TITLE - ${BUILD_TIME}_build-${BUILD_NUMBER}"
#        paths:
#            - dist
#        expire_in: 999 yrs
#    allow_failure: false
#    only:
#    - merge_requests
#    cache:
#        key: ${CI_COMMIT_REF_SLUG}
#        paths:
#            - node_modules
#        policy: pull
#            #- dist


#+==================Runs onevery commit and tags manual========================+
gitlab_build_branch:
 image: docker:latest
 stage: build-gitlab
 when: manual
 services:
   - docker:dind
 before_script:
   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
 dependencies:
   - node_artifacts
   - time_build
 script:
   - cp -r dist ./docker/
   - cd docker
   - |-
       if [ $CI_COMMIT_BRANCH != '' ]; then
         docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .;
         docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "$IMAGE_NAME_BRANCH";
         docker push "$IMAGE_NAME_BRANCH";
       elif [ $CI_COMMIT_TAG != '' ]; then
         docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" .;
         docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG";
       fi
 only:
   - /^.+_f-.+$/
   - /^.+_b-.+$/
   - tags
 allow_failure: false


#+==================Runs on merge requests only========================+
gitlab_build_merge:
  image: docker:latest
  stage: build-gitlab
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add --update curl jq
  dependencies:
    - node_artifacts
    - time_build

  variables:
    BRANCH: MERGE_BRANCH
    TIME_VAR: BUILD_TIME
    TOKEN: ${CI_PIPELINE_IID_TOKEN}
    GITLAB_URL: "https://gitlab.expertflow.com"

  script:

    - export TIME_TOKEN="$(cat .ci_status/ci_time)"
    - echo $TIME_TOKEN
    - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${TIME_VAR}\" --form \"value=${TIME_TOKEN}\" "
    - "curl -s -f --request PUT --header \"PRIVATE-TOKEN: ${TOKEN}\" \"${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/variables/${BRANCH}\" --form \"value=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}\" "
    - cp -r dist ./docker/
    - cd docker
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${TIME_TOKEN}"
    - docker push "${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${TIME_TOKEN}"
  only:
    - merge_requests
  allow_failure: false
  artifacts:
    paths:
      - .ci_status/

##==================Trivy scan branch========================##
trivy_scanning_branch:
  extends: .trivy_scan_template
  when: on_success
  needs:
    - job: gitlab_build_branch
  allow_failure: false
  stage: scan
  variables:
    FULL_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHA}
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/


##==================Trivy scan merge========================##

trivy_scanning_merge:
  stage: scan
  extends: .trivy_scan_merge
  needs:
    - job: gitlab_build_merge
    - job: time_build
      artifacts: true
  only:
    - merge_requests


#================================================

#+==================Runs on if docker build in branch========================+
grype_scan_branch:
  extends: .grype_template
  stage: scan
  needs:
    - job: gitlab_build_branch
  when: on_success
  allow_failure: false
  variables:
    SCAN_IMAGE: $CI_REGISTRY_IMAGE/build:$CI_COMMIT_BRANCH-$CI_COMMIT_SHA
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/


#+==================Runs on merge requests only========================+

grype_scan_merge:
  stage: scan
  extends: .grype_template_merge
  needs:
    - job: gitlab_build_merge
    - job: time_build
      artifacts: true
  only:
    - merge_requests
  allow_failure: false
  artifacts:
    paths:
      - .ci_status/

##==================Trivy scan branch========================##
trivy_scanning_branch:
  extends: .trivy_scan_template
  when: on_success
  needs:
    - job: gitlab_build_branch
  allow_failure: false
  stage: scan
  variables:
    FULL_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHA}
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/


##==================Trivy scan merge========================##
trivy_scanning_merge:
  when: on_success
  stage: scan
  extends: .trivy_scan_template
  before_script:
    - export TIME_TOKEN="$(cat .ci_status/ci_time)"
  needs:
    - job: gitlab_build_merge
  variables:
    FULL_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}-${TIME_TOKEN}
  allow_failure: false
  only:
    - merge_requests
  artifacts:
    paths:
      - .ci_status/
#================================================

#+==================Runs on if docker build in branch========================+
grype_scan_branch:
  extends: .grype_template
  stage: scan
  needs:
    - job: gitlab_build_branch
  when: on_success
  allow_failure: false
  variables:
    SCAN_IMAGE: $CI_REGISTRY_IMAGE/build:$CI_COMMIT_BRANCH-$CI_COMMIT_SHA
  only:
    - /^.+_f-.+$/
    - /^.+_b-.+$/



# #+==================Runs on tag requests only========================+
# uncomment if need to publish to dockerhub

# dockerhub_publish:
#   extends: .publish_dockerhub
#   stage: publish_dockerhub
#   when: on_success
#   only:
#     - tags
